CREATE TABLE  "CC_CLASSIFICATION" 
   (	"ID_CLASSIFICATION" NUMBER NOT NULL ENABLE, 
	"CLASSIFICATION_COL" VARCHAR2(100), 
	 CONSTRAINT "CC_CLASSIFICATION_PK" PRIMARY KEY ("ID_CLASSIFICATION") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "CC_CLASSIFIER" 
   (	"ID_CONTRAGENT" NUMBER NOT NULL ENABLE, 
	"ID_TYPE" NUMBER, 
	"ID_CLASSIFICATION" NUMBER, 
	 CONSTRAINT "CC_CLASSIFIER_PK" PRIMARY KEY ("ID_CONTRAGENT") ENABLE
   )
/
CREATE TABLE  "CC_CONTRAGENTS" 
   (	"CONTRAGENT_ID" NUMBER NOT NULL ENABLE, 
	"LEGAL_NAME" VARCHAR2(100), 
	"CONTRAGENT_COL" VARCHAR2(100), 
	"ID_CONTRAGENT" NUMBER, 
	 CONSTRAINT "CONTRAGENTS_PK" PRIMARY KEY ("CONTRAGENT_ID") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "CC_TYPE" 
   (	"ID_TYPE" NUMBER NOT NULL ENABLE, 
	"TYPE_COL" VARCHAR2(100), 
	 CONSTRAINT "CC_TYPE_PK" PRIMARY KEY ("ID_TYPE") ENABLE
   )
/
CREATE TABLE  "WEEKDAYS" 
   (	"ID_WEEKDAY" NUMBER, 
	"WEEKDAY_NAME" VARCHAR2(50), 
	"WEEKDAY_BG" VARCHAR2(50), 
	 CONSTRAINT "WEEKDAYS_PK" PRIMARY KEY ("ID_WEEKDAY") ENABLE
   )
/
CREATE TABLE  "CC_CREDIT_CARD" 
   (	"reference" VARCHAR2(255) NOT NULL ENABLE, 
	"date_time" DATE, 
	"value_date" DATE, 
	"debit" NUMBER(38,2), 
	"credit" NUMBER(38,2), 
	"trname" VARCHAR2(500), 
	"contragent" VARCHAR2(500), 
	"rem_i" VARCHAR2(500), 
	"rem_ii" VARCHAR2(500), 
	"rem_iii" VARCHAR2(500), 
	"YEAR_CC" NUMBER, 
	"MONTH_CC" NUMBER, 
	"DAY_CC" NUMBER, 
	"ID_WEEKDAY" NUMBER, 
	"PERIOD" NUMBER, 
	"ID_CONTRAGENT" NUMBER, 
	"ID_TYPE" NUMBER, 
	"ID_CLASSIFICATION" NUMBER, 
	 CONSTRAINT "CC_CREDIT_CARD_CON" PRIMARY KEY ("reference") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "CC_CREDIT_CARD_PRE" 
   (	"reference" VARCHAR2(255) NOT NULL ENABLE, 
	"datetime" VARCHAR2(50), 
	"valuedate" VARCHAR2(50), 
	"debit" VARCHAR2(50), 
	"credit" VARCHAR2(50), 
	"trname" VARCHAR2(500), 
	"contragent" VARCHAR2(500), 
	"rem_i" VARCHAR2(500), 
	"rem_ii" VARCHAR2(500), 
	"rem_iii" VARCHAR2(500), 
	 CONSTRAINT "credit_card_PK" PRIMARY KEY ("reference") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "HTMLDB_PLAN_TABLE" 
   (	"STATEMENT_ID" VARCHAR2(30), 
	"PLAN_ID" NUMBER, 
	"TIMESTAMP" DATE, 
	"REMARKS" VARCHAR2(4000), 
	"OPERATION" VARCHAR2(30), 
	"OPTIONS" VARCHAR2(255), 
	"OBJECT_NODE" VARCHAR2(128), 
	"OBJECT_OWNER" VARCHAR2(30), 
	"OBJECT_NAME" VARCHAR2(30), 
	"OBJECT_ALIAS" VARCHAR2(65), 
	"OBJECT_INSTANCE" NUMBER(*,0), 
	"OBJECT_TYPE" VARCHAR2(30), 
	"OPTIMIZER" VARCHAR2(255), 
	"SEARCH_COLUMNS" NUMBER, 
	"ID" NUMBER(*,0), 
	"PARENT_ID" NUMBER(*,0), 
	"DEPTH" NUMBER(*,0), 
	"POSITION" NUMBER(*,0), 
	"COST" NUMBER(*,0), 
	"CARDINALITY" NUMBER(*,0), 
	"BYTES" NUMBER(*,0), 
	"OTHER_TAG" VARCHAR2(255), 
	"PARTITION_START" VARCHAR2(255), 
	"PARTITION_STOP" VARCHAR2(255), 
	"PARTITION_ID" NUMBER(*,0), 
	"OTHER" LONG, 
	"DISTRIBUTION" VARCHAR2(30), 
	"CPU_COST" NUMBER(*,0), 
	"IO_COST" NUMBER(*,0), 
	"TEMP_SPACE" NUMBER(*,0), 
	"ACCESS_PREDICATES" VARCHAR2(4000), 
	"FILTER_PREDICATES" VARCHAR2(4000), 
	"PROJECTION" VARCHAR2(4000), 
	"TIME" NUMBER(*,0), 
	"QBLOCK_NAME" VARCHAR2(30)
   )
/
CREATE TABLE  "PRE_RP" 
   (	"ID_PAYMENT" NUMBER NOT NULL ENABLE, 
	"CONTRAGENT" VARCHAR2(255), 
	"REF_NUMBER1" VARCHAR2(255), 
	"TIMESTAMP" VARCHAR2(20), 
	"REF_NUMBER2" VARCHAR2(255), 
	"AMOUNT" VARCHAR2(20), 
	 CONSTRAINT "PRE_RP_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "RP_ACCOUNTS" 
   (	"ID_ACCOUNT" NUMBER NOT NULL ENABLE, 
	"ACCOUNT_NAME" VARCHAR2(255), 
	 CONSTRAINT "PRE_ACCOUNT_PK" PRIMARY KEY ("ID_ACCOUNT") ENABLE
   )
/
CREATE TABLE  "RP_SERVICE" 
   (	"ID_SERVICE" NUMBER NOT NULL ENABLE, 
	"SERVICE_NAME" VARCHAR2(255), 
	 CONSTRAINT "RP_SERVICE_PK" PRIMARY KEY ("ID_SERVICE") ENABLE
   )
/
CREATE TABLE  "RP_CONTRAGENT" 
   (	"ID_CONTRAGENT" NUMBER NOT NULL ENABLE, 
	"CONTRAGENT" VARCHAR2(255), 
	"ID_ACCOUNT" NUMBER, 
	"ID_SERVICE" NUMBER, 
	 CONSTRAINT "REC_ACCOUNT_PK" PRIMARY KEY ("ID_CONTRAGENT") ENABLE
   )
/
CREATE TABLE  "RP_RECURRING_PAYMENTS" 
   (	"ID_PAYMENT" NUMBER NOT NULL ENABLE, 
	"TIME_STAMP" TIMESTAMP (6), 
	"CONTRAGENT" VARCHAR2(255), 
	"AMMOUNT" NUMBER, 
	"REF_NUMBER1" VARCHAR2(255), 
	"REF_NUMBER2" VARCHAR2(255), 
	"YEAR_RP" NUMBER, 
	"MONTH_RP" NUMBER, 
	"DAY_RP" NUMBER, 
	"ID_WEEKDAY" NUMBER, 
	"ID_CONTRAGENT" NUMBER, 
	"ID_ACCOUNT" NUMBER, 
	"ID_SERVICE" NUMBER, 
	 CONSTRAINT "RP_RECURRING_PAYMENTS_PK" PRIMARY KEY ("ID_PAYMENT") ENABLE
   )
/
ALTER TABLE  "CC_CONTRAGENTS" ADD CONSTRAINT "CC_CONTRAGENTS_CON" FOREIGN KEY ("ID_CONTRAGENT")
	  REFERENCES  "CC_CLASSIFIER" ("ID_CONTRAGENT") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "CC_CREDIT_CARD" ADD CONSTRAINT "CC_CREDIT_CARD_CC_CLASS_FK" FOREIGN KEY ("ID_CLASSIFICATION")
	  REFERENCES  "CC_CLASSIFICATION" ("ID_CLASSIFICATION") ENABLE
/
ALTER TABLE  "CC_CREDIT_CARD" ADD CONSTRAINT "CC_CREDIT_CARD_CC_CONTRAG_FK" FOREIGN KEY ("ID_CONTRAGENT")
	  REFERENCES  "CC_CONTRAGENTS" ("CONTRAGENT_ID") DISABLE
/
ALTER TABLE  "CC_CREDIT_CARD" ADD CONSTRAINT "CC_CREDIT_CARD_CC_TYPE_FK" FOREIGN KEY ("ID_TYPE")
	  REFERENCES  "CC_TYPE" ("ID_TYPE") ENABLE
/
ALTER TABLE  "CC_CREDIT_CARD" ADD CONSTRAINT "CC_CREDIT_CARD_WEEKDAYS_FK" FOREIGN KEY ("ID_WEEKDAY")
	  REFERENCES  "WEEKDAYS" ("ID_WEEKDAY") ENABLE
/
ALTER TABLE  "RP_CONTRAGENT" ADD CONSTRAINT "RP_CONTRAGENT_RP_ACCOUNTS_FK" FOREIGN KEY ("ID_ACCOUNT")
	  REFERENCES  "RP_ACCOUNTS" ("ID_ACCOUNT") ENABLE
/
ALTER TABLE  "RP_CONTRAGENT" ADD CONSTRAINT "RP_CONTRAGENT_RP_SERVICE_FK" FOREIGN KEY ("ID_SERVICE")
	  REFERENCES  "RP_SERVICE" ("ID_SERVICE") ENABLE
/
CREATE OR REPLACE FUNCTION  "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2)
return varchar2
is
  l_password varchar2(4000);
  l_salt varchar2(4000) := '6AZC3H3LIIR0UYT44ZOG8SSCVCXMMK';begin

-- This function should be wrapped, as the hash algorhythm is exposed here.
-- You can change the value of l_salt or the method of which to call the
-- DBMS_OBFUSCATOIN toolkit, but you much reset all of your passwords
-- if you choose to do this.

l_password := utl_raw.cast_to_raw(dbms_obfuscation_toolkit.md5
  (input_string => p_password || substr(l_salt,10,13) || p_username ||    substr(l_salt, 4,10)));
return l_password;
end;
/

CREATE INDEX  "CC_CONTRAGENTS_IDX1" ON  "CC_CONTRAGENTS" ("CONTRAGENT_ID", "ID_CONTRAGENT", "CONTRAGENT_COL", "LEGAL_NAME")
/
CREATE INDEX  "CC_CREDIT_CARD_IDX_CREDIT" ON  "CC_CREDIT_CARD" ("date_time", "credit", "contragent", "ID_CONTRAGENT")
/
CREATE INDEX  "CC_CREDIT_CARD_IDX_DEBIT" ON  "CC_CREDIT_CARD" ("date_time", "debit", "contragent", "ID_CONTRAGENT")
/
CREATE INDEX  "RP_RECURRING_PAYMENTS_IDX2" ON  "RP_RECURRING_PAYMENTS" ("TIME_STAMP", "CONTRAGENT", "REF_NUMBER1", "REF_NUMBER2")
/
CREATE UNIQUE INDEX  "WEEKDAYS_IDX1" ON  "WEEKDAYS" ("ID_WEEKDAY", "WEEKDAY_NAME", "WEEKDAY_BG")
/
CREATE OR REPLACE PROCEDURE  "EXPORT_CC_AFTRER" (after_date IN VARCHAR2)
is
   tempTable CC_CREDIT_CARD%ROWTYPE;
begin
	SELECT * INTO tempTable FROM FINANCE.CC_CREDIT_CARD
	WHERE "date_time" > TO_DATE(after_date, 'YYYY-MM-DD')	ORDER BY "date_time";end;
/

 CREATE SEQUENCE   "RP_SERVICE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2322 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "RP_RECURRING_PAYMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 11207 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "REC_ACCOUNT_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 63 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_RP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2266 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "PRE_RECURRING_PAYMENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 201 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CREDIT_CARD_SEQ1"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CREDIT_CARD_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CONTRAGENTS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1933 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CC_TYPE_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
CREATE OR REPLACE TRIGGER  "RP_RECURRING_PAYMENTS_T1" BEFORE insert on "RP_RECURRING_PAYMENTS"for each row  if :NEW."ID_PAYMENT" is null then     select "RP_SERVICE_SEQ".nextval into :NEW."ID_PAYMENT" from sys.dual;   end if; end; 
/
ALTER TRIGGER  "RP_RECURRING_PAYMENTS_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "CC_CONTRAGENTS_CLASSIFIER_T1" 
BEFORE
insert or update on "CC_CONTRAGENTS"
for each row
begin
INSERT INTO FINANCE.CC_CLASSIFIER (ID_CONTRAGENT)
    select :new.ID_CONTRAGENT
    from DUAL
    WHERE NOT EXISTS(select ID_CONTRAGENT 
                     from FINANCE.CC_CLASSIFIER 
                     where (ID_CONTRAGENT= :new.ID_CONTRAGENT));
end;

/
ALTER TRIGGER  "CC_CONTRAGENTS_CLASSIFIER_T1" DISABLE
/
CREATE OR REPLACE TRIGGER  "BI_credit_card" 
  before insert on "CC_CREDIT_CARD_PRE"              
  for each row 
begin  
  if :NEW."reference" is null then
    select "CREDIT_CARD_SEQ".nextval into :NEW."reference" from dual;
  end if;
end;

/
ALTER TRIGGER  "BI_credit_card" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_RP_SERVICE" 
  before insert on "RP_SERVICE"               
  for each row  
begin   
  if :NEW."ID_SERVICE" is null then 
    select "RP_SERVICE_SEQ".nextval into :NEW."ID_SERVICE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_RP_SERVICE" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_REC_ACCOUNT"   before insert on "RP_CONTRAGENT"                 for each row    if :NEW."ID_CONTRAGENT" is null then     select "REC_ACCOUNT_SEQ".nextval into :NEW."ID_CONTRAGENT" from dual;   end if; end; 
/
ALTER TRIGGER  "BI_REC_ACCOUNT" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_PRE_RP" 
  before insert on "PRE_RP"               
  for each row  
begin   
  if :NEW."ID_PAYMENT" is null then 
    select "PRE_RP_SEQ".nextval into :NEW."ID_PAYMENT" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_PRE_RP" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CONTRAGENTS"   before insert on "CC_CONTRAGENTS"                 for each row    if :NEW."CONTRAGENT_ID" is null then     select "CONTRAGENTS_SEQ".nextval into :NEW."CONTRAGENT_ID" from dual;   end if; end; 
/
ALTER TRIGGER  "BI_CONTRAGENTS" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CC_TYPE" 
  before insert on "CC_TYPE"               
  for each row  
begin   
  if :NEW."ID_TYPE" is null then 
    select "CC_TYPE_SEQ".nextval into :NEW."ID_TYPE" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CC_TYPE" ENABLE
/
CREATE OR REPLACE FORCE VIEW  "CC_BALANCE" ("Year", "tax", "bonus", "balance") AS 
  SELECT
         YEAR_CC AS "Year",
         SUM("debit") as "tax",
         SUM("credit") AS "bonus",
         SUM("credit") - SUM("debit") AS "balance"
      from
          CC_CREDIT_CARD
      WHERE
          "trname" = 'Бонус точки'
      OR
          "trname" = 'Такси картови операции'
      OR
          "trname" = 'Лихви кредитни карти'
      GROUP BY YEAR_CC
      order by YEAR_CC desc
/
CREATE OR REPLACE FORCE VIEW  "CC_CONTRAGENTS_EMP" ("CONTRAGENT_ID", "LEGAL_NAME", "CONTRAGENT_COL", "ID_CONTRAGENT") AS 
              "CONTRAGENT_ID",            "LEGAL_NAME",            "CONTRAGENT_COL",            FINANCE.CC_CONTRAGENTS.ID_CONTRAGENT            FROM FINANCE.CC_CONTRAGENTS            WHERE FINANCE.CC_CONTRAGENTS.CONTRAGENT_COL IS NULL            OR FINANCE.CC_CONTRAGENTS.ID_CONTRAGENT IS NULL            ORDER BY ID_CONTRAGENT DESC, CONTRAGENT_ID DESC, LEGAL_NAME
/
CREATE OR REPLACE FORCE VIEW  "CC_EMPTY_ID_CONTRAGENT" ("contragent") AS 
  SELECT "contragent" FROM FINANCE.CC_CREDIT_CARD WHERE ID_CONTRAGENT IS NULL AND "contragent" IS NOT NULL
/
CREATE OR REPLACE FORCE VIEW  "CC_LOG" ("reference", "date_time", "value_date", "debit", "credit", "trname", "contragent", "rem_i", "rem_ii", "rem_iii", "YEAR_CC", "MONTH_CC", "DAY_CC", "WEEKDAY_BG", "PERIOD", "ID_CONTRAGENT", "TYPE_COL", "CLASSIFICATION_COL") AS 
  SELECT          
        "reference",              
        "date_time",             
        "value_date",             
        "debit",             
        "credit",             
        "trname",             
        "contragent",             
        "rem_i",             
        "rem_ii",             
        "rem_iii",              
        "YEAR_CC",             
        "MONTH_CC",              
        "DAY_CC",             
        "WEEKDAY_BG",             
        "PERIOD",             
        "ID_CONTRAGENT",             
        "TYPE_COL",            
        "CLASSIFICATION_COL"        
    FROM CC_CREDIT_CARD        
    JOIN FINANCE.WEEKDAYS ON CC_CREDIT_CARD.ID_WEEKDAY = WEEKDAYS.ID_WEEKDAY        
    JOIN CC_TYPE ON CC_CREDIT_CARD.ID_TYPE = CC_TYPE.ID_TYPE        
    JOIN CC_CLASSIFICATION ON CC_CREDIT_CARD.ID_CLASSIFICATION = CC_CLASSIFICATION.ID_CLASSIFICATION        
    ORDER BY "date_time" DESC, "value_date" DESC
/
CREATE OR REPLACE FORCE VIEW  "CC_SORT" ("reference", "date_time", "value_date", "debit", "credit", "trname", "contragent", "rem_i", "rem_ii", "rem_iii", "YEAR_CC", "MONTH_CC", "DAY_CC", "ID_WEEKDAY", "PERIOD", "ID_CONTRAGENT", "ID_TYPE", "ID_CLASSIFICATION") AS 
  SELECT          
        "reference","date_time","value_date","debit","credit","trname","contragent","rem_i","rem_ii","rem_iii","YEAR_CC","MONTH_CC","DAY_CC","ID_WEEKDAY","PERIOD","ID_CONTRAGENT","ID_TYPE","ID_CLASSIFICATION"        
    FROM CC_CREDIT_CARD            
    ORDER BY "date_time" DESC, "value_date" DESC
/
CREATE OR REPLACE FORCE VIEW  "CONTRAGENTS_EMP" ("CONTRAGENT_ID", "LEGAL_NAME", "CONTRAGENT_COL", "ID_CONTRAGENT", "ID_CLASSIFICATION", "ID_TYPE") AS 
  SELECT 
	"CONTRAGENT_ID",
	"LEGAL_NAME",
	"CONTRAGENT_COL",
	FINANCE.CC_CONTRAGENTS.ID_CONTRAGENT,
	FINANCE.CC_CLASSIFIER."ID_CLASSIFICATION",
	FINANCE.CC_CLASSIFIER."ID_TYPE" 
FROM FINANCE.CC_CONTRAGENTS
JOIN FINANCE.CC_CLASSIFIER ON FINANCE.CC_CLASSIFIER.ID_CONTRAGENT = FINANCE.CC_CONTRAGENTS.ID_CONTRAGENT
WHERE FINANCE.CC_CONTRAGENTS.ID_CONTRAGENT IS NULL
OR FINANCE.CC_CLASSIFIER."ID_CLASSIFICATION" IS NULL
OR FINANCE.CC_CLASSIFIER."ID_TYPE" IS NULL
ORDER BY ID_CONTRAGENT DESC, CONTRAGENT_ID DESC, ID_CLASSIFICATION DESC, ID_TYPE DESC, LEGAL_NAME
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_FREQUENCY" ("CONTRAGENT", "#", "AVG_INTERVAL", "AVG_DEBIT", "MEDIAN_DEBIT", "STDDEV_DEBIT") AS 
  SELECT
    cc.CONTRAGENT_COL CONTRAGENT,
    COUNT(c.ID_CONTRAGENT) as "#",
    ROUND(AVG(INTERVAL_DAYS),0) as "AVG_INTERVAL",
    ROUND(AVG(DEBIT),2) as "AVG_DEBIT", ROUND(MEDIAN(DEBIT),2) as "MEDIAN_DEBIT", ROUND(STDDEV(DEBIT),2) as "STDDEV_DEBIT"
    FROM
        (SELECT
            "value_date"
            ,ID_CONTRAGENT
            ,LEAD("value_date",1) OVER (PARTITION BY ID_CONTRAGENT ORDER BY "value_date" DESC) PREV_DATE
            ,"value_date" - LEAD("value_date",1) OVER (PARTITION BY ID_CONTRAGENT ORDER BY "value_date" DESC) AS "INTERVAL_DAYS"
            ,"debit" as DEBIT
            FROM CC_CREDIT_CARD
         ) c
    JOIN 
        (SELECT DISTINCT ID_CONTRAGENT, CONTRAGENT_COL FROM CC_CONTRAGENTS) cc
    ON c.ID_CONTRAGENT = cc.ID_CONTRAGENT
    GROUP BY cc.CONTRAGENT_COL
    ORDER BY "#" DESC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_MONTHLY_STATS" ("MONTH_CC", "MIN_SUM_DEBIT", "AVG_SUM_DEBIT", "MEDIAN_SUM_DEBIT", "MAX_SUM_DEBIT", "STDDEV_SUM_DEBIT", "MIN_SUM_CREDIT", "AVG_SUM_CREDIT", "MEDIAN_SUM_CREDIT", "MAX_SUM_CREDIT", "STDDEV_SUM_CREDIT") AS 
  SELECT
    MONTH_CC,
    MIN(SUM_DEBIT) AS MIN_SUM_DEBIT,
    round(avg(SUM_DEBIT),2) as AVG_SUM_DEBIT,
    round(MEDIAN(SUM_DEBIT),2) as MEDIAN_SUM_DEBIT,
    MAX(SUM_DEBIT) AS MAX_SUM_DEBIT,
    round(STDDEV(SUM_DEBIT),2) as STDDEV_SUM_DEBIT,
    MIN(SUM_CREDIT) AS MIN_SUM_CREDIT,
    round(avg(SUM_CREDIT),2) as AVG_SUM_CREDIT,
    round(MEDIAN(SUM_CREDIT),2) as MEDIAN_SUM_CREDIT,
    MAX(SUM_CREDIT) AS MAX_SUM_CREDIT,
    round(STDDEV(SUM_CREDIT),2) as STDDEV_SUM_CREDIT
    FROM
    (
        SELECT
                YEAR_CC,
                MONTH_CC,
                SUM("debit") as SUM_DEBIT,
                SUM("credit") as SUM_CREDIT
            FROM CC_CREDIT_CARD
            GROUP BY YEAR_CC, MONTH_CC
            ORDER BY YEAR_CC DESC
        )
GROUP BY MONTH_CC
ORDER BY MONTH_CC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_CONTRAGENT" ("CONTRAGENT_COL", "DEBIT", "AVG_debit", "CNT", "AVG_INTERVAL", "TOTAL_INTERVAL") AS 
  SELECT
	CONTRAGENT_COL,
	SUM(debit) AS DEBIT,
	ROUND(AVG(debit),2) AS "AVG_debit",
	COUNT(CONTRAGENT_COL) AS CNT,
	--DATE_SINCE_LAST,
	ROUND(AVG(DATE_INTERVAL),0) AS AVG_INTERVAL,
	SUM(DATE_INTERVAL) AS TOTAL_INTERVAL
	FROM
(SELECT          
        "reference",
        "date_time",
        "value_date",
        "debit" AS "DEBIT",
        "credit",
        "trname",
        "contragent",
        "rem_i",
        "rem_ii",
        "rem_iii",
        "YEAR_CC",
        "MONTH_CC",
        "DAY_CC",
        w.WEEKDAY_NAME,
        "PERIOD",
        "CONTRAGENT_COL",
        ct.TYPE_COL,
        cl.CLASSIFICATION_COL,
        LAG("value_date",1) OVER (PARTITION BY cc.ID_CONTRAGENT ORDER BY "value_date" DESC) - "value_date" AS "DATE_INTERVAL",
        SYSDATE - "value_date" AS DATE_SINCE_LAST
    FROM FINANCE.CC_CREDIT_CARD cc
	JOIN FINANCE.CC_TYPE ct ON ct.ID_TYPE = cc.ID_TYPE
	JOIN FINANCE.CC_CLASSIFICATION cl ON cl.ID_CLASSIFICATION = cc.ID_CLASSIFICATION
	JOIN FINANCE.WEEKDAYS w ON w.ID_WEEKDAY = cc.ID_WEEKDAY
	JOIN 
		(SELECT 
			DISTINCT ID_CONTRAGENT, 
					CONTRAGENT_COL AS CONTRAGENT_COL 
			FROM FINANCE.CC_CONTRAGENTS) con ON con.ID_CONTRAGENT = cc.ID_CONTRAGENT
    ORDER BY "date_time" DESC, "value_date" DESC) ccj
   	GROUP BY CONTRAGENT_COL
   ORDER BY DEBIT DESC, CNT DESC, CONTRAGENT_COL
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_MONTH" ("YEAR", "MONTH", "TRANSACTION #", "AVG Debit", "AVG Credit", "STDDEV Debit", "STDDEV Credit", "SUM Debit", "SUM Credit", "Balance", "TTL_AVG") AS 
  SELECT
    YEAR_CC AS "YEAR",
    MONTH_CC AS "MONTH",
    count("debit") AS "TRANSACTION #",
    ROUND(AVG("debit"),2) as "AVG Debit",
    ROUND(AVG("credit"),2) as "AVG Credit",
    ROUND(STDDEV("debit"),2) as "STDDEV Debit",
    ROUND(STDDEV("credit"),2) as "STDDEV Credit",
    SUM(NVL("debit",0))*-1 as "SUM Debit",
    SUM(nvl("credit",0)) as "SUM Credit",
    SUM(nvl("credit",0)) - SUM(NVL("debit",0)) AS "Balance",
    (SELECT AVG_SUM_DEBIT FROM CREDIT_CARD_MONTHLY_STATS WHERE CREDIT_CARD_MONTHLY_STATS.MONTH_CC = CC_CREDIT_CARD.MONTH_CC) - SUM(NVL("debit",0)) as TTL_AVG
FROM
    FINANCE.CC_CREDIT_CARD
GROUP BY YEAR_CC, MONTH_CC
ORDER BY YEAR_CC DESC, MONTH_CC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_PERIOD" ("YEAR", "PERIOD", "TRANSACTION #", "AVG Debit", "AVG Credit", "STDDEV Debit", "STDDEV Credit", "SUM Debit", "SUM Credit") AS 
        "PERIOD",          count("debit") AS "TRANSACTION #",          ROUND(AVG("debit"),2) as "AVG Debit",          ROUND(AVG("credit"),2) as "AVG Credit",          ROUND(STDDEV("debit"),2) as "STDDEV Debit",          ROUND(STDDEV("credit"),2) as "STDDEV Credit",          SUM("debit") as "SUM Debit",          SUM("credit") as "SUM Credit"    FROM    FINANCE.CC_CREDIT_CARD    GROUP BY YEAR_CC, "PERIOD"    ORDER BY YEAR_CC DESC, "PERIOD"
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_STAT_YEAR" ("YEAR", "TRANSACTION #", "AVG Debit", "AVG Credit", "AVG Monthly Debit", "STDDEV Debit", "STDDEV Credit", "SUM Debit", "SUM Credit", "Balance") AS 
  SELECT YEAR_CC AS "YEAR",
	COUNT("debit") AS "TRANSACTION #",
	ROUND(AVG("debit"),2) as "AVG Debit",
	ROUND(SUM("debit")/COUNT("debit"),2) as "AVG Monthly Debit",
	ROUND(AVG("credit"),2) as "AVG Credit",
	ROUND(STDDEV("debit"),2) as "STDDEV Debit",
	ROUND(STDDEV("credit"),2) as "STDDEV Credit",
	SUM(nvl("debit",0)) *-1 as "SUM Debit",
	SUM(Nvl("credit",0)) as "SUM Credit",
	SUM(NVL("credit",0)) - SUM(nvl("debit",0)) as "Balance"
FROM
	FINANCE.CC_CREDIT_CARD
GROUP BY YEAR_CC
ORDER BY YEAR_CC DESC
/
CREATE OR REPLACE FORCE VIEW  "CREDIT_CARD_TYPE_YEAR" ("YEAR", "TYPE", "TRANSACTION #", "SUM Debit", "AVG Debit", "AVG Monthly Debit", "STDDEV Debit") AS 
      YEAR_CC AS "YEAR",    ct.TYPE_COL as "TYPE", 	COUNT("debit") AS "TRANSACTION #",	SUM(nvl("debit",0)) as "SUM Debit",	ROUND(AVG("debit"),2) as "AVG Debit",	ROUND(SUM("debit")/COUNT("debit"),2) as "AVG Monthly Debit",	ROUND(STDDEV("debit"),2) as "STDDEV Debit"FROM	FINANCE.CC_CREDIT_CARD c    JOIN CC_CLASSIFIER clas ON clas.ID_CONTRAGENT = c.ID_CONTRAGENT    JOIN CC_TYPE ct on ct.ID_TYPE = clas.ID_TYPEGROUP BY YEAR_CC, ct.TYPE_COLORDER BY YEAR_CC DESC, "SUM Debit" DESC
/
CREATE OR REPLACE FORCE VIEW  "PRE_RP_SORTED" ("TIME_STAMP", "CONTRAGENT", "AMOUNT", "REF_NUMBER1", "REF_NUMBER2", "YEAR", "MONTH", "DAY", "ID_WEEKDAY", "ID_CONTRAGENT", "ID_ACCOUNT", "ID_SERVICE") AS 
  SELECT TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS') AS TIME_STAMP,	PRE_RP.CONTRAGENT,	    TO_NUMBER( REPLACE(PRE_RP.AMOUNT, ' BGN')) AS AMOUNT,	    PRE_RP.REF_NUMBER1,	PRE_RP.REF_NUMBER2,	EXTRACT(YEAR FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS YEAR,	    EXTRACT(MONTH FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS MONTH,	    EXTRACT(DAY FROM TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS')) AS DAY,	TO_NUMBER(TO_CHAR(TO_TIMESTAMP(PRE_RP.TIMESTAMP, 'DD/MM/YYYY HH24:MI:SS'), 'd')), NULL,	NULL,	NULL FROM	PRE_RP ORDER BY    TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "PR_STAT_QUARTER" ("Тримесечие", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT      
        CEIL(MONTH_RP/3) AS "Тримесечие",    
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        ROUND(SUM(RP_RECURRING_PAYMENTS.AMMOUNT)/(select max(YEAR_RP)-min(YEAR_RP) FROM RP_RECURRING_PAYMENTS),2) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    GROUP BY CEIL(MONTH_RP/3)
    ORDER BY CEIL(MONTH_RP/3)
/
CREATE OR REPLACE FORCE VIEW  "RP_DESCRIPTIONS" ("ID_PAYMENT", "TIME_STAMP", "CONTRAGENT", "AMMOUNT", "AVG_AMMOUNT", "STDDEV_AMMOUNT", "YEAR_RP", "MONTH_RP", "DAY_RP", "WEEKDAY_BG", "ACCOUNT_NAME", "SERVICE_NAME") AS 
  SELECT 
    ID_PAYMENT,
    TIME_STAMP,
    rp.CONTRAGENT,
    AMMOUNT,
    AVG_AMMOUNT,
    STDDEV_AMMOUNT,
    YEAR_RP,
    MONTH_RP,
    DAY_RP,
    WEEKDAY_BG,
    ACCOUNT_NAME,
    SERVICE_NAME
    from RP_RECURRING_PAYMENTS rp
    JOIN (select 
                CONTRAGENT,
                COUNT(*) as CNT,
                ROUND(AVG(AMMOUNT),2) "AVG_AMMOUNT",
                ROUND(STDDEV(AMMOUNT),2) "STDDEV_AMMOUNT"
                from RP_RECURRING_PAYMENTS
                GROUP BY CONTRAGENT
                ORDER BY CNT DESC) stats
    ON rp.CONTRAGENT = stats.CONTRAGENT
    JOIN WEEKDAYS on WEEKDAYS.ID_WEEKDAY = rp.ID_WEEKDAY
    JOIN RP_ACCOUNTS ON RP_ACCOUNTS.ID_ACCOUNT = rp.ID_ACCOUNT
    JOIN RP_SERVICE ON RP_SERVICE.ID_SERVICE = rp.ID_SERVICE
    ORDER BY TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "RP_SORTED" ("ID_PAYMENT", "TIME_STAMP", "CONTRAGENT", "AMMOUNT", "REF_NUMBER1", "REF_NUMBER2", "YEAR_RP", "MONTH_RP", "DAY_RP", "ID_WEEKDAY", "ID_CONTRAGENT", "ID_ACCOUNT", "ID_SERVICE") AS 
  SELECT "ID_PAYMENT","TIME_STAMP","CONTRAGENT","AMMOUNT","REF_NUMBER1","REF_NUMBER2","YEAR_RP","MONTH_RP","DAY_RP","ID_WEEKDAY","ID_CONTRAGENT","ID_ACCOUNT","ID_SERVICE" from rp_recurring_payments order by TIME_STAMP DESC
/
CREATE OR REPLACE FORCE VIEW  "RP_STAT" ("Година", "Тримесечие", "Месец", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT  
        YEAR_RP AS "Година",    
        CEIL(MONTH_RP/3) AS "Тримесечие",    
        MONTH_RP AS "Месец",
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        SUM(RP_RECURRING_PAYMENTS.AMMOUNT) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    GROUP BY YEAR_RP, MONTH_RP
    ORDER BY YEAR_RP DESC, MONTH_RP
/
CREATE OR REPLACE FORCE VIEW  "RP_YEAR_STAT" ("Година", "ACCOUNT_NAME", "Брой транзакции", "СУМА", "Средно", "STDDEV") AS 
  SELECT  
        YEAR_RP AS "Година",
        ra.ACCOUNT_NAME,
        COUNT(RP_RECURRING_PAYMENTS.AMMOUNT) as "Брой транзакции",   
        SUM(RP_RECURRING_PAYMENTS.AMMOUNT) as "СУМА",
        ROUND(AVG(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "Средно",    
        ROUND(STDDEV(RP_RECURRING_PAYMENTS.AMMOUNT),2) as "STDDEV" 
    from RP_RECURRING_PAYMENTS
    JOIN RP_ACCOUNTS ra on ra.ID_ACCOUNT = RP_RECURRING_PAYMENTS.ID_ACCOUNT
    GROUP BY YEAR_RP, ra.ACCOUNT_NAME
    ORDER BY YEAR_RP
/
