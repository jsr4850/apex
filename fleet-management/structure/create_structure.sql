CREATE TABLE  "WEEKDAYS" 
   (	"ID_WEEKDAY" NUMBER, 
	"WEEKDAY_NAME" VARCHAR2(50), 
	"WEEKDAY_BG" VARCHAR2(50), 
	 CONSTRAINT "WEEKDAYS_PK" PRIMARY KEY ("ID_WEEKDAY") ENABLE
   )
/
CREATE TABLE  "CALENDAR" 
   (	"DATE_COL" DATE NOT NULL ENABLE, 
	"YEAR_COL" NUMBER, 
	"MONTH_COL" NUMBER, 
	"DAY" NUMBER, 
	"WEEKDAY" NUMBER, 
	"QUARTER" NUMBER, 
	 CONSTRAINT "CALENDAR_PK" PRIMARY KEY ("DATE_COL") ENABLE
   )
/
CREATE TABLE  "CARS" 
   (	"ID_CAR" NUMBER NOT NULL ENABLE, 
	"MAKE" VARCHAR2(45), 
	"MODEL" VARCHAR2(45), 
	"DKN" VARCHAR2(8), 
	"ACTIVE" NUMBER(*,0), 
	"VALID_FROM" DATE, 
	"VALID_TILL" DATE, 
	 CONSTRAINT "CARS_PK" PRIMARY KEY ("ID_CAR") ENABLE
   )
/
CREATE TABLE  "CLASSIFICATION" 
   (	"ID_CLASSIFICATION" NUMBER NOT NULL ENABLE, 
	"CLASSIFICATION" VARCHAR2(255), 
	 CONSTRAINT "CLASSIFICATION_PK" PRIMARY KEY ("ID_CLASSIFICATION") ENABLE
   )
/
CREATE TABLE  "DRIVE_TYPE" 
   (	"ID_DRIVE_TYPE" NUMBER, 
	"DRIVE_TYPE" VARCHAR2(100), 
	 CONSTRAINT "DRIVE_TYPE_PK" PRIMARY KEY ("ID_DRIVE_TYPE") ENABLE
   )
/
CREATE TABLE  "SUPPLIER_FUELS" 
   (	"ID_BRAND" NUMBER, 
	"SUPPLIER_NAME" VARCHAR2(100), 
	"FUEL_BRAND" VARCHAR2(100), 
	"FUEL_NAME" NVARCHAR2(50), 
	"TYPE" NVARCHAR2(50), 
	 CONSTRAINT "SUPPLIER_FUELS_PK" PRIMARY KEY ("ID_BRAND") ENABLE
   )
/
CREATE TABLE  "FUEL" 
   (	"ID_FUEL" NUMBER NOT NULL ENABLE, 
	"ID_CAR" NUMBER, 
	"DATE_COL" DATE, 
	"KM" NUMBER, 
	"AMOUNT" NUMBER, 
	"PRICE" NUMBER, 
	"TOTAL" NUMBER, 
	"ID_BRAND" NUMBER, 
	"ID_DRIVE_TYPE" NUMBER, 
	"YEAR_COL" NUMBER, 
	"MONTH_COL" NUMBER, 
	"DAY_COL" NUMBER, 
	"WEEKDAY_COL" NUMBER, 
	"MILEAGE" NUMBER, 
	"PERIOD" NUMBER, 
	"LKM" NUMBER, 
	 CONSTRAINT "FUEL_PK" PRIMARY KEY ("ID_FUEL") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "FUELTMP" 
   (	"ID" NUMBER, 
	"МАРКА" VARCHAR2(30), 
	"ДАТА" DATE, 
	"ПРОБЕГ" NUMBER, 
	"КОЛИЧЕСТВО" VARCHAR2(30), 
	"ЦЕНА" VARCHAR2(30), 
	"СТОЙНОСТ" VARCHAR2(30), 
	"БРАНД" VARCHAR2(30), 
	"KM" VARCHAR2(30), 
	"ВИД" VARCHAR2(30), 
	"РАЗХОД" VARCHAR2(30), 
	"РАЗХОДKM" VARCHAR2(30), 
	"ИНТЕРВАЛ" VARCHAR2(30), 
	"ГОДИНА" NUMBER, 
	"МЕСЕЦ" NUMBER, 
	"ДЕН" NUMBER, 
	"ДЕН_ОТ_СЕДМИЦА" VARCHAR2(30), 
	"ROW_INDEX" VARCHAR2(30), 
	 CONSTRAINT "FUELTMP_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "FUEL_APP" 
   (	"ID_FUEL" NUMBER NOT NULL ENABLE, 
	"ID_CAR" NUMBER, 
	"DATE_COL" DATE, 
	"KM" NUMBER, 
	"AMOUNT" NUMBER, 
	"PRICE" NUMBER, 
	"TOTAL" NUMBER, 
	"ID_BRAND" NUMBER, 
	"ID_DRIVE_TYPE" NUMBER, 
	 CONSTRAINT "FUEL_APP_PK" PRIMARY KEY ("ID_FUEL") ENABLE
   )
/
CREATE TABLE  "MAINTENANCE" 
   (	"ID_MAINTENANCE" NUMBER NOT NULL ENABLE, 
	"ID_CAR" NUMBER, 
	"DATE_COL" DATE, 
	"MILEAGE" NUMBER, 
	"REFERENCE" VARCHAR2(255), 
	"TOTAL" NUMBER, 
	"INTERVAL_COL" NUMBER, 
	"ID_CLASSIFICATION" NUMBER, 
	"PRICE_PER_KM" NUMBER, 
	"INTERVAL_DAYS" NUMBER, 
	 CONSTRAINT "MAINTENANCE_PK" PRIMARY KEY ("ID_MAINTENANCE", "ID_CAR") ENABLE
   )  ENABLE ROW MOVEMENT
/
CREATE TABLE  "MAINTENANCE_PRP" 
   (	"ID" NUMBER, 
	"CAR" VARCHAR2(30), 
	"ДАТА" DATE, 
	"КИЛОМЕТРИ" NUMBER, 
	"ЗАБЕЛЕЖКА" VARCHAR2(255), 
	"ЦЕНА" VARCHAR2(30), 
	"ИНТЕРВАЛ" VARCHAR2(30), 
	"КЛАСИФИКАЦИЯ" VARCHAR2(30), 
	"ГОДИНА" NUMBER, 
	"МЕСЕЦ" NUMBER, 
	 CONSTRAINT "MAINTENANCE_PRP_PK" PRIMARY KEY ("ID") ENABLE
   )
/
CREATE TABLE  "OWNER" 
   (	"ID" NUMBER NOT NULL ENABLE, 
	"FIRST_NAME" NVARCHAR2(255), 
	"LAST_NAME" NVARCHAR2(255), 
	"ID_CAR" NUMBER, 
	 CONSTRAINT "OWNER_PK" PRIMARY KEY ("ID") ENABLE
   )
/
ALTER TABLE  "CALENDAR" ADD CONSTRAINT "CALENDAR_FK_WEEKDAY" FOREIGN KEY ("WEEKDAY")
	  REFERENCES  "WEEKDAYS" ("ID_WEEKDAY") ENABLE
/
ALTER TABLE  "FUEL_APP" ADD CONSTRAINT "FUEL_APP_BRAND_FK" FOREIGN KEY ("ID_BRAND")
	  REFERENCES  "SUPPLIER_FUELS" ("ID_BRAND") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "FUEL_APP" ADD CONSTRAINT "FUEL_APP_DRIVETYPE_FK" FOREIGN KEY ("ID_DRIVE_TYPE")
	  REFERENCES  "DRIVE_TYPE" ("ID_DRIVE_TYPE") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "FUEL_APP" ADD CONSTRAINT "FUEL_APP_FK" FOREIGN KEY ("ID_CAR")
	  REFERENCES  "CARS" ("ID_CAR") ON DELETE SET NULL ENABLE
/
ALTER TABLE  "FUEL" ADD CONSTRAINT "FUEL_FK_CALENDAR" FOREIGN KEY ("DATE_COL")
	  REFERENCES  "CALENDAR" ("DATE_COL") ENABLE
/
ALTER TABLE  "FUEL" ADD CONSTRAINT "FUEL_FK_CAR" FOREIGN KEY ("ID_CAR")
	  REFERENCES  "CARS" ("ID_CAR") ENABLE
/
ALTER TABLE  "FUEL" ADD CONSTRAINT "FUEL_FK_DRIVETYPE" FOREIGN KEY ("ID_DRIVE_TYPE")
	  REFERENCES  "DRIVE_TYPE" ("ID_DRIVE_TYPE") ENABLE
/
ALTER TABLE  "FUEL" ADD CONSTRAINT "FUEL_FK_FBRAND" FOREIGN KEY ("ID_BRAND")
	  REFERENCES  "SUPPLIER_FUELS" ("ID_BRAND") ENABLE
/
ALTER TABLE  "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_CARS_FK" FOREIGN KEY ("ID_CAR")
	  REFERENCES  "CARS" ("ID_CAR") ENABLE
/
ALTER TABLE  "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_CLASSIFICATION_FK" FOREIGN KEY ("ID_CLASSIFICATION")
	  REFERENCES  "CLASSIFICATION" ("ID_CLASSIFICATION") ENABLE
/
ALTER TABLE  "MAINTENANCE" ADD CONSTRAINT "MAINTENANCE_FK_CALENDAR" FOREIGN KEY ("DATE_COL")
	  REFERENCES  "CALENDAR" ("DATE_COL") ENABLE
/
CREATE OR REPLACE FUNCTION  "MILEAGEFUNC" 
(idfuel_in IN NUMBER)
return NUMBER
is
begin
RETURN(
    SELECT diff FROM (
        SELECT 
            LAG(KM,1) OVER (PARTITION BY ID_CAR ORDER BY DATE_COL DESC) - km AS diff
        FROM FUEL
        WHERE ID_FUEL = idfuel_in
        ORDER BY DATE_COL DESC)
    
end;
/

CREATE OR REPLACE FUNCTION  "CUSTOM_HASH" (p_username in varchar2, p_password in varchar2)
return varchar2
is
  l_password varchar2(4000);
  l_salt varchar2(4000) := 'JVBH4UC966E8QBHK47NGHACBUOXD2I';
begin

-- This function should be wrapped, as the hash algorhythm is exposed here.
-- You can change the value of l_salt or the method of which to call the
-- DBMS_OBFUSCATOIN toolkit, but you much reset all of your passwords
-- if you choose to do this.

l_password := utl_raw.cast_to_raw(dbms_obfuscation_toolkit.md5
  (input_string => p_password || substr(l_salt,10,13) || p_username ||
    substr(l_salt, 4,10)));
return l_password;
end;
/

CREATE OR REPLACE FUNCTION  "CUSTOM_AUTH" (p_username in VARCHAR2, p_password in VARCHAR2)
return BOOLEAN
is
  l_password varchar2(4000);
  l_stored_password varchar2(4000);
  l_expires_on date;
  l_count number;
begin
-- First, check to see if the user is in the user table
select count(*) into l_count from demo_users where user_name = p_username;
if l_count > 0 then  -- First, we fetch the stored hashed password & expire date  select password, expires_on into l_stored_password, l_expires_on
   from demo_users where user_name = p_username;

  -- Next, we check to see if the user's account is expired  -- If it is, return FALSE
  if l_expires_on > sysdate or l_expires_on is null then
    -- If the account is not expired, we have to apply the custom hash
    -- function to the password
    l_password := custom_hash(p_username, p_password);

    -- Finally, we compare them to see if they are the same and return
    -- either TRUE or FALSE
    if l_password = l_stored_password then
      return true;
    else
      return false;
    end if;
  else
    return false;
  end if;
else
  -- The username provided is not in the DEMO_USERS table
  return false;
end if;
end;
/

CREATE INDEX  "CARS_DKN_IDX" ON  "CARS" ("DKN", "ACTIVE", "VALID_FROM", "VALID_TILL")
/
CREATE INDEX  "FUEL_DATE_DESC_IDX" ON  "FUEL" ("ID_CAR", "DATE_COL" DESC, "KM", "AMOUNT", "PRICE", "TOTAL", "ID_BRAND", "ID_DRIVE_TYPE", "MILEAGE", "LKM", "PERIOD")
/
CREATE UNIQUE INDEX  "WEEKDAYS_IDX1" ON  "WEEKDAYS" ("ID_WEEKDAY", "WEEKDAY_NAME", "WEEKDAY_BG")
/
CREATE OR REPLACE PROCEDURE  "SUPPLIER_REPORT" 
IS
    "FUEL_BRAND"
AS

BEGIN
    SELECT
        CARS.SUPPLIER_FUELS.SUPPLIER_NAME || ' ' || CARS.SUPPLIER_FUELS.FUEL_BRAND AS "FUEL BRAND",
        SUM(MILEAGE) AS "MILEAGE",
        SUM(TOTAL) AS "Fuel Price",
        SUM(AMOUNT) AS "Amount",
        ROUND(SUM(AMOUNT)/SUM(MILEAGE)*100,2) AS "l/100 km",
        ROUND(SUM(TOTAL)/SUM(MILEAGE),2) AS "cost per km"
    FROM
        CARS.FUEL
    JOIN CARS.SUPPLIER_FUELS ON CARS.SUPPLIER_FUELS.ID_BRAND = CARS.FUEL.ID_BRAND
    GROUP BY CARS.SUPPLIER_FUELS.SUPPLIER_NAME || ' ' || CARS.SUPPLIER_FUELS.FUEL_BRAND
    HAVING SUM(MILEAGE) >0
    ORDER BY MILEAGE DESC;
END SUPPLIER_REPORT;
/

 CREATE SEQUENCE   "OWNER_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MAINTENANCE_PRP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1348 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "MAINTENANCE_PREP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "FUELTMP_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 2741 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "CARS_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 41 CACHE 20 NOORDER  NOCYCLE
/
 CREATE SEQUENCE   "ARTICULES_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 21 CACHE 20 NOORDER  NOCYCLE
/

CREATE OR REPLACE TRIGGER  "bi_MAINTENANCE_PRP" 
  before insert on "MAINTENANCE_PRP"              
  for each row 
begin  
  if :new."ID" is null then
    select "MAINTENANCE_PRP_SEQ".nextval into :new."ID" from dual;
  end if;
end;

/
ALTER TRIGGER  "bi_MAINTENANCE_PRP" ENABLE
/
CREATE OR REPLACE TRIGGER  "bi_FUELTMP" 
  before insert on "FUELTMP"              
  for each row 
begin  
  if :new."ID" is null then
    select "FUELTMP_SEQ".nextval into :new."ID" from sys.dual;
  end if;
end;

/
ALTER TRIGGER  "bi_FUELTMP" ENABLE
/
CREATE OR REPLACE TRIGGER  "FUEL_CALENDAR" 
BEFORE
insert or update on "FUEL"
for each row
begin
    INSERT INTO CARS.CALENDAR (DATE_COL)
    select :new.DATE_COL
    from dual
    WHERE NOT EXISTS(select DATE_COL 
                     from CARS.CALENDAR 
                     where (DATE_COL= :new.DATE_COL));
end;

/
ALTER TRIGGER  "FUEL_CALENDAR" ENABLE
/
CREATE OR REPLACE trigger "AI_CALENDAR_UPDATE"
AFTER
insert on "CALENDAR"
begin
UPDATE CARS.CALENDAR 
SET 
	YEAR_COL = EXTRACT(YEAR FROM DATE_COL), 
	MONTH_COL= EXTRACT(MONTH FROM DATE_COL),
	"DAY" = EXTRACT(DAY FROM DATE_COL), 
	WEEKDAY = TO_NUMBER(TO_CHAR(DATE_COL, 'd')), 
	QUARTER = CEIL(EXTRACT(MONTH FROM DATE_COL)/3);
end;
ALTER TRIGGER  "AI_CALENDAR_UPDATE" ENABLE
/
CREATE OR REPLACE TRIGGER  "FUEL_APP_CALENDAR" 
AFTER 
insert on "FUEL_APP"
for each row
begin
    --lock table CARS.CALENDAR in exclusive mode;   
    INSERT INTO CARS.CALENDAR (DATE_COL)
    select :new.DATE_COL
    from dual
    WHERE NOT EXISTS(select DATE_COL 
                     from CARS.CALENDAR 
                     where (DATE_COL= :new.DATE_COL));
exception
    when dup_val_on_index then null;
end;
/
ALTER TRIGGER  "FUEL_APP_CALENDAR" ENABLE
/
CREATE OR REPLACE TRIGGER  "CALENDAR_T1"
AFTER
insert on "CALENDAR"
"DAY" = EXTRACT(DAY FROM DATE_COL), 	WEEKDAY = TO_NUMBER(TO_CHAR(DATE_COL, 'd')), 	QUARTER = CEIL(EXTRACT(MONTH FROM DATE_COL)/3);end;
/
ALTER TRIGGER  "CALENDAR_T1" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_OWNER" 
  before insert on "OWNER"               
  for each row  
begin   
  if :NEW."ID" is null then 
    select "OWNER_SEQ".nextval into :NEW."ID" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_OWNER" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_FUEL_APP" 
  before insert on "FUEL_APP"               
  for each row  
begin   
  if :NEW."ID_FUEL" is null then 
    select "FUELTMP_SEQ".nextval into :NEW."ID_FUEL" from sys.dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_FUEL_APP" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CLASSIFICATION" 
  before insert on "CLASSIFICATION"               
  for each row  
begin   
  if :NEW."ID_CLASSIFICATION" is null then 
    select "ARTICULES_SEQ".nextval into :NEW."ID_CLASSIFICATION" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CLASSIFICATION" ENABLE
/
CREATE OR REPLACE TRIGGER  "BI_CARS" 
  before insert on "CARS"               
  for each row  
begin   
  if :NEW."ID_CAR" is null then 
    select "CARS_SEQ".nextval into :NEW."ID_CAR" from dual; 
  end if; 
end; 

/
ALTER TRIGGER  "BI_CARS" ENABLE
/
CREATE OR REPLACE FORCE VIEW  "FUEL_CONSUMPTION_PREDICTION" ("ID_CAR", "CAR", "DKN", "AVG_PERIOD", "PREDICTED_REFILL", "MILEAGE", "PREDICTED_MILEAGE", "L_100_KM") AS 
  SELECT 
        par.ID_CAR,
        MAKE || ' ' ||MODEL as "CAR",
        DKN,
        ROUND(AVG(PERIOD),0) as AVG_PERIOD,
        (SELECT MAX(DATE_COL) FROM FUEL chld WHERE chld.ID_CAR = par.ID_CAR)+ROUND(AVG(PERIOD),0) as PREDICTED_REFILL,
        ROUND(AVG(MILEAGE),0) MILEAGE,
        (SELECT MAX(KM) FROM FUEL fl_km WHERE fl_km.ID_CAR = par.ID_CAR) + ROUND(AVG(MILEAGE),0) AS PREDICTED_MILEAGE,
        ROUND(AVG(LKM)*100,2) as L_100_KM
    FROM FUEL par    
    JOIN CARS.CARS on par.ID_CAR = CARS.ID_CAR    
    WHERE MONTH_COL BETWEEN MONTH_COL - 2 AND MONTH_COL + 2 AND "ACTIVE" = 1
    GROUP BY par.ID_CAR, MAKE || ' ' ||MODEL, DKN
/
CREATE OR REPLACE FORCE VIEW  "FUEL_CONSUMPTION_REPORT" ("year", "month", "MAKE", "MODEL", "DKN", "AMOUNT", "MILEAGE", "KPL") AS 
  SELECT
        CARS.CALENDAR.YEAR_COL as "year"
        ,CARS.CALENDAR.MONTH_COL as "month"
        ,make
        ,model
        ,dkn
        ,sum(AMOUNT) as amount
        ,sum(MILEAGE) as mileage
        ,round(sum(AMOUNT)/sum(MILEAGE)*100,2) as kpl
    FROM
        CARS.fuel  
    JOIN
        CARS.CARS       ON CARS.FUEL.ID_CAR = CARS.CARS.ID_CAR
    JOIN
        CARS.CALENDAR   ON CARS.CALENDAR.DATE_COL = CARS.FUEL.DATE_COL
    GROUP by CARS.CALENDAR.YEAR_COL, CARS.CALENDAR.MONTH_COL, make, model, dkn  
    order by CARS.CALENDAR.YEAR_COL DESC, CARS.CALENDAR.MONTH_COL
/
CREATE OR REPLACE FORCE VIEW  "FUEL_MILEAGE" ("ID_FUEL", "MLG_OLD", "MLG_NEW") AS 
  SELECT 
	    ID_FUEL,
	    LAG (KM,1) OVER (PARTITION BY ID_CAR ORDER BY DATE_COL DESC) AS next_refuel,
	    LAG (KM,1) OVER (PARTITION BY ID_CAR ORDER BY DATE_COL DESC) - KM AS diff
	FROM CARS.FUEL
	ORDER BY DATE_COL DESC
/
CREATE OR REPLACE FORCE VIEW  "FUEL_PRICES_BY_MONTH" ("MONTH", "MAX FUEL PRICE", "MIN FUEL PRICE", "AVG FUEL PRICE", "MEDIAN FUEL PRICE", "STDDEV FUEL PRICE") AS 
  SELECT CALENDAR.MONTH_COL AS "MONTH", ROUND(MAX(price),2), ROUND(MIN(price),2),         ROUND(AVG(price),2) AS "AVG FUEL PRICE",          ROUND(MEDIAN(price),2) AS "MEDIAN FUEL PRICE",          ROUND(STDDEV(price),2) AS "STDDEV FUEL PRICE"       FROM           CARS.FUEL        JOIN CARS.CALENDAR ON CARS.CALENDAR.DATE_COL = CARS.FUEL.DATE_COL       GROUP BY CALENDAR.MONTH_COL       ORDER BY CALENDAR.MONTH_COL
/
CREATE OR REPLACE FORCE VIEW  "FUEL_PRICES_BY_QUARTER" ("QUARTER", "AVG FUEL PRICE", "MEDIAN FUEL PRICE", "STDDEV FUEL PRICE") AS 
  SELECT
          CALENDAR.QUARTER AS "QUARTER",
          ROUND(AVG(price),2) AS "AVG FUEL PRICE",
          ROUND(MEDIAN(price),2) AS "MEDIAN FUEL PRICE",
          ROUND(STDDEV(price),2) AS "STDDEV FUEL PRICE"

       FROM
           CARS.FUEL
        JOIN CARS.CALENDAR ON CARS.CALENDAR.DATE_COL = CARS.FUEL.DATE_COL
       GROUP BY CALENDAR.QUARTER
       ORDER BY CALENDAR.QUARTER
/
CREATE OR REPLACE FORCE VIEW  "FUEL_PRICES_BY_YEAR" ("YEAR", "AVG FUEL PRICE", "MEDIAN FUEL PRICE", "STDDEV FUEL PRICE") AS 
            ROUND(AVG(price),2) AS "AVG FUEL PRICE",          ROUND(MEDIAN(price),2) AS "MEDIAN FUEL PRICE",          ROUND(STDDEV(price),2) AS "STDDEV FUEL PRICE"    FROM CARS.FUEL        JOIN CARS.CALENDAR ON CARS.CALENDAR.DATE_COL = CARS.FUEL.DATE_COL    group by    CALENDAR.YEAR_COL        ORDER BY    CALENDAR.YEAR_COL DESC
/
CREATE OR REPLACE FORCE VIEW  "FUEL_REFUEL" ("ID_FUEL", "CAR", "DATE", "KM", "AMOUNT", "PRICE", "TOTAL", "FUEL BRAND", "DRIVE TYPE", "MILEAGE", "LKM", "PERIOD", "YEAR", "QUARTER", "MONTH", "DAY", "WEEKDAY") AS 
  SELECT
            CARS.FUEL."ID_FUEL",
            CARS.MAKE || ' ' || CARS.MODEL AS "CAR",
            TO_CHAR(FUEL.DATE_COL, 'YYYY/MM/DD'),
            KM,
            AMOUNT,
            PRICE,
            TOTAL,
            FUEL_NAME AS "FUEL BRAND",
            DRIVE_TYPE,
            MILEAGE,
            LKM,
            PERIOD,
            CALENDAR.YEAR_COL,
            CALENDAR.QUARTER,
            CALENDAR.MONTH_COL,
            CALENDAR.DAY,
            WEEKDAYS.WEEKDAY_BG
        FROM CARS.FUEL
        JOIN CARS.CARS ON CARS.FUEL.ID_CAR=CARS.CARS.ID_CAR
        JOIN CARS.SUPPLIER_FUELS ON CARS.FUEL.ID_BRAND = CARS.SUPPLIER_FUELS.ID_BRAND
        JOIN CARS.DRIVE_TYPE ON CARS.FUEL.ID_DRIVE_TYPE = CARS.DRIVE_TYPE.ID_DRIVE_TYPE
        JOIN CARS.CALENDAR ON CARS.CALENDAR.DATE_COL = CARS.FUEL.DATE_COL
        JOIN CARS.WEEKDAYS ON CARS.WEEKDAYS.ID_WEEKDAY = CARS.CALENDAR.WEEKDAY
        ORDER BY FUEL.DATE_COL DESC
/
CREATE OR REPLACE FORCE VIEW  "FUEL_SORTED" ("ID_FUEL", "ID_CAR", "DATE_FUEL", "KM", "AMOUNT", "PRICE", "TOTAL", "ID_BRAND", "ID_DRIVE_TYPE", "YEAR_FUEL", "MONTH_FUEL", "DAY_FUEL", "WEEKDAY_FUEL", "MILEAGE", "PERIOD", "LKM") AS 
          "ID_FUEL",        "ID_CAR",        FUEL."DATE_COL",        "KM",        "AMOUNT",        "PRICE",        "TOTAL",        "FUEL_NAME",        "ID_DRIVE_TYPE",        CALENDAR."YEAR_COL",        CALENDAR."MONTH_COL",        CALENDAR."DAY",        CALENDAR."WEEKDAY",        "MILEAGE",        "PERIOD",        "LKM"    FROM FUEL       JOIN CARS.SUPPLIER_FUELS ON CARS.SUPPLIER_FUELS.ID_BRAND = FUEL.ID_BRAND    JOIN CARS.CALENDAR ON CARS.CALENDAR.DATE_COL = FUEL.DATE_COL    ORDER BY FUEL.DATE_COL DESC
/
CREATE OR REPLACE FORCE VIEW  "MAINTENANCE_CAR_REPORT" ("DKN", "REFERENCE", "AVG INTERVAl", "AVG PERIOD") AS 
  SELECT
			DKN,
			REFERENCE,
			ROUND(avg(INTERVAL_COL),0) as "AVG INTERVAl",
			ROUND(AVG(INTERVAL_DAYS),0) AS "AVG PERIOD"
		FROM MAINTENANCE
		JOIN CARS ON CARS.ID_CAR = MAINTENANCE.ID_CAR
		group by DKN, REFERENCE
		ORDER BY DKN DESC, REFERENCE
/
CREATE OR REPLACE FORCE VIEW  "MAINTENANCE_PPK" ("DKN", "MLG", "TOTAL", "PPK") AS 
  SELECT
        DKN,
        MAX(MILEAGE) - MIN (MILEAGE) AS "MLG",
        SUM(TOTAL) as "TOTAL IN L", 
        ROUND(SUM(TOTAL) / (MAX(MILEAGE) - MIN (MILEAGE)),2) as "PRICE PER KM IN L"
    FROM MAINTENANCE  m JOIN CARS.CARS ON CARS.CARS.ID_CAR = m.ID_CAR
    GROUP BY DKN
    ORDER BY DKN DESC
/
CREATE OR REPLACE FORCE VIEW  "MAINTENANCE_PREDICTION" ("QUARTER", "CLASSIFICATION", "TOTAL") AS 
  SELECT 
    QUARTER, 
    CLASSIFICATION, 
    ROUND(AVG(TOTAL),2) AS TOTAL
  FROM MAINTENANCE 
    JOIN CALENDAR ON MAINTENANCE.DATE_COL=CALENDAR.DATE_COL 
    JOIN CLASSIFICATION ON MAINTENANCE.ID_CLASSIFICATION = CLASSIFICATION.ID_CLASSIFICATION 
    GROUP BY CLASSIFICATION, QUARTER
    ORDER BY QUARTER
/
CREATE OR REPLACE FORCE VIEW  "MAINTENANCE_SORT" ("ID_MAINTENANCE", "CAR", "DATE", "MILEAGE", "REFERENCE", "TOTAL", "INTERVAL_COL", "CLASSIFICATION", "YEAR", "MONTH", "PRICE_PER_KM") AS 
  SELECT "ID_MAINTENANCE",        CONCAT( MAKE, CONCAT(' ', MODEL)) AS "CAR",        CARS.MAINTENANCE."DATE_COL",        "MILEAGE",        "REFERENCE",        "TOTAL",        "INTERVAL_COL",        "CLASSIFICATION",        "YEAR_COL",        "MONTH_COL", "PRICE_PER_KM"               FROM               	        CARS.MAINTENANCE    JOIN        CARS.CLASSIFICATION ON CARS.CLASSIFICATION.ID_CLASSIFICATION = CARS.MAINTENANCE.ID_CLASSIFICATION    JOIN        CARS.CARS        	ON CARS.CARS.ID_CAR = CARS.MAINTENANCE.ID_CAR    JOIN        CARS.CALENDAR       ON CARS.CALENDAR.DATE_COL = CARS.MAINTENANCE.DATE_COL    ORDER BY CARS.MAINTENANCE.DATE_COL DESC
/
CREATE OR REPLACE FORCE VIEW  "MAINTENANCE_STAT" ("DKN", "REFERENCE", "LAST_MLG", "PERIOD_IN_KM", "LAST_DATE", "PERIOD_IN_DAYS", "CNT", "SUM_INTERVAL", "AVG_INTERVAL_DAYS", "AVG_TOTAL", "STDDEV_INTERVAL", "STDDEV_TOTAL", "TOTAL") AS 
  SELECT 
    DKN,
    REFERENCE,
    MAX(MILEAGE) AS LAST_MLG,
    MAX(mx.KM)-MAX(MILEAGE) as PERIOD_IN_KM,
    MAX(MAINTENANCE.DATE_COL) AS LAST_DATE,
    ROUND(SYSDATE - MAX(MAINTENANCE.DATE_COL),0) as PERIOD_IN_DAYS,
    COUNT(REFERENCE) as CNT,
    SUM(INTERVAL_COL) as SUM_INTERVAL,
    ROUND(AVG(INTERVAL_COL),2) as AVG_INTERVAL,
    ROUND(AVG(TOTAL),2) AS AVG_TOTAL,
    ROUND(STDDEV(INTERVAL_COL),2) as STDDEV_INTERVAL,
    ROUND(STDDEV(TOTAL),2) AS STDDEV_TOTAL,
    SUM(TOTAL) AS TOTAL
  FROM MAINTENANCE 
    JOIN CALENDAR ON MAINTENANCE.DATE_COL=CALENDAR.DATE_COL 
    JOIN CLASSIFICATION ON MAINTENANCE.ID_CLASSIFICATION = CLASSIFICATION.ID_CLASSIFICATION
    JOIN CARS ON CARS.ID_CAR = MAINTENANCE.ID_CAR
    JOIN (SELECT ID_CAR, MAX(KM) as KM FROM FUEL GROUP BY ID_CAR) mx ON MAINTENANCE.ID_CAR = mx.ID_CAR
    WHERE CARS.ACTIVE=1
    GROUP BY DKN, REFERENCE
    ORDER BY REFERENCE, DKN, LAST_MLG DESC
/
CREATE OR REPLACE FORCE VIEW  "MAINTENANCE_TIMESERIES_STAT" ("ID_MAINTENANCE", "ID_CAR", "DKN", "REFERENCE", "DATE_COL", "PREV_DATE", "INTERVAL_DAYS", "MILEAGE", "PREV_MLG", "INTERVAL_KM") AS 
  SELECT
		ID_MAINTENANCE,
		m.ID_CAR,
		DKN,
		REFERENCE,
		DATE_COL,
		LEAD(DATE_COL,1) OVER (PARTITION BY m.ID_CAR, REFERENCE ORDER BY DATE_COL DESC) PREV_DATE,
		DATE_COL - LEAD(DATE_COL,1) OVER (PARTITION BY m.ID_CAR, REFERENCE ORDER BY DATE_COL DESC) AS "INTERVAL_DAYS",
                MILEAGE,
                LEAD(MILEAGE,1) OVER (PARTITION BY m.ID_CAR, REFERENCE ORDER BY DATE_COL DESC) PREV_MLG,
		INTERVAL_COL AS "INTERVAL_KM"
		FROM CARS.MAINTENANCE m
		JOIN CARS.CARS c ON c.ID_CAR = m.ID_CAR
        ORDER BY DATE_COL DESC
/
CREATE OR REPLACE FORCE VIEW  "MILEAGE_STAT" ("YEAR", "MILEAGE", "AVG_MILEAGE", "STDDEV_MLG") AS 
  SELECT 
    YEAR,
    SUM(MILEAGE) as Mileage,
    round(avg(MILEAGE),2) AS avg_Mileage,
    round(STDDEV(MILEAGE),2) as STDDEV_MLG
FROM (
    SELECT
        YEAR_COL as YEAR,
        SUM(MILEAGE) AS MILEAGE
        FROM FUEL
        GROUP BY YEAR_COL, MONTH_COL
        ORDER BY YEAR)
GROUP BY YEAR
ORDER BY YEAR
/
CREATE OR REPLACE FORCE VIEW  "NEXT_REFUEL" ("ID_CAR", "DKN", "PREVIOUS_DATE", "PREDICTED_DATE", "EXPECTED_PERIOD", "KLM", "KM", "PREDICTED_KM") AS 
  SELECT
        DISTINCT mx.ID_CAR,
        DKN,
        MAX_DATE AS PREVIOUS_DATE,
        MAX_DATE+ROUND(AMOUNT/PER_DIEM,0) AS PREDICTED_DATE,
        ROUND(AMOUNT/PER_DIEM,0) AS EXPECTED_PERIOD,
        FUEL_CONSUMPTION,
        MAX_KM AS KM,
        MAX_KM + ROUND(AMOUNT/FUEL_CONSUMPTION*100,0) as PREDICTED_KM
        FROM
            (SELECT 
                ID_CAR,
                MAX(KM) as MAX_KM,
                MAX(DATE_COL) as MAX_DATE
                FROM FUEL
                GROUP BY ID_CAR) mx
            JOIN
            (SELECT 
                ID_CAR,
                KM,
                AMOUNT
                FROM FUEL) kms
            ON mx.ID_CAR = kms.ID_CAR
            JOIN
            (SELECT 
                ID_CAR,
                ROUND(SUM(AMOUNT)/SUM(PERIOD),2) as PER_DIEM,
                ROUND(SUM(AMOUNT)/SUM(MILEAGE)*100,2) as FUEL_CONSUMPTION
                FROM FUEL
                WHERE DATE_COL > SYSDATE-120
                AND PERIOD != 0
                AND MILEAGE IS NOT NULL
                GROUP BY ID_CAR
            ) prdm 
            ON prdm.ID_CAR = mx.ID_CAR
            JOIN CARS ON mx.ID_CAR = CARS.ID_CAR
        WHERE mx.MAX_KM = kms.KM
        AND mx.ID_CAR = kms.ID_CAR
        AND CARS.ACTIVE=1
/
CREATE OR REPLACE FORCE VIEW  "TCO" ("DKN", "MILEAGE", "AMOUNT", "F_TOTAL", "M_TOTAL", "SUM", "KM", "PRICE_PER_KM", "ACTIVE") AS 
  SELECT
        DKN,
        MILEAGE,
        AMOUNT,
        f_TOTAL,
        m_total,
        f_TOTAL+m_total as sum,
        KM,
        ROUND((f_TOTAL+m_total)/KM,2) AS PRICE_PER_KM,
        ACTIVE
    FROM
    (select 
        ID_CAR,
        SUM(AMOUNT) AS AMOUNT,
        SUM(TOTAL) AS f_TOTAL,
        SUM(MILEAGE) AS MILEAGE,
        MIN(KM) as MIN_KM,
        MAX(KM) AS MAX_KM,
        (MAX(KM)-MIN(KM)) AS KM
    from FUEL
    GROUP BY ID_CAR) f
    JOIN
    (select 
        ID_CAR,
        SUM(TOTAL) as m_total
    from MAINTENANCE
    group by ID_CAR) m ON f.ID_CAR = m.ID_CAR
    JOIN CARS ON CARS.ID_CAR = f.ID_CAR
    ORDER BY ACTIVE DESC, DKN
/
CREATE OR REPLACE FORCE VIEW  "V_FUEL_CONS_PER_DRVTYPE" ("YEAR", "MONTH", "DKN", "DRIVE_TYPE", "TOTAL", "AMOUNT", "MILEAGE", "l/100km") AS 
  SELECT
    YEAR_COL as YEAR,
    MONTH_COL as MONTH,
    DKN,
    DRIVE_TYPE,
    SUM(TOTAL) as TOTAL,
    SUM(AMOUNT) as AMOUNT,
    SUM(MILEAGE) as MILEAGE,
    ROUND(SUM(AMOUNT) / SUM(MILEAGE) * 100,2) as "l/100km"
    FROM FUEL
    JOIN DRIVE_TYPE ON FUEL.ID_DRIVE_TYPE = DRIVE_TYPE.ID_DRIVE_TYPE
    JOIN CARS ON FUEL.ID_CAR = CARS.ID_CAR
    GROUP BY YEAR_COL, MONTH_COL, DKN, DRIVE_TYPE
    ORDER BY YEAR_COL DESC,
    MONTH_COL ASC
/
CREATE OR REPLACE FORCE VIEW  "V_SUPPLIER_REPORT" ("FUEL BRAND", "MILEAGE", "Fuel Price", "Amount", "l/100 km", "cost per km", "URBAN", "Extra URBAN", "COUNTRY") AS 
  SELECT
		fname AS fname,
		SUM(mlg) AS "MILEAGE",
		SUM(ttl) AS "Fuel Price",
		SUM(amt) AS "Amount",
		ROUND(SUM(amt)/SUM(mlg)*100,2) AS "l/100 km",
		ROUND(SUM(ttl)/SUM(mlg),2) AS "cost per km",
		SUM(urb) AS "Urban",
		SUM(exurb) AS "Extra-urban",
		SUM(cmb) AS "Combined"
		FROM
			(SELECT 
				FUEL_NAME fname, 
				MILEAGE AS mlg,
				AMOUNT amt,
				TOTAL ttl,
				CASE WHEN ID_DRIVE_TYPE = 1 THEN MILEAGE END AS urb,
				CASE WHEN ID_DRIVE_TYPE = 2 THEN MILEAGE END AS exurb,
				CASE WHEN ID_DRIVE_TYPE = 3 THEN MILEAGE END AS cmb
			FROM CARS.FUEL
			JOIN CARS.SUPPLIER_FUELS ON CARS.SUPPLIER_FUELS.ID_BRAND = CARS.FUEL.ID_BRAND) t
		GROUP BY fname
		HAVING SUM(MLG) >0
		ORDER BY SUM(MLG) DESC
/
